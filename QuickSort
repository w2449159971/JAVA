  // 数组array中下标为i和j位置的元素进行交换
        private static void swap(int[] array, int i, int j) {
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }

        private static void recQuickSort(int[] array, int left, int right) {
            if (right <= left) {
                return;
            } else {
                int partition = partitionIt(array, left, right);
                recQuickSort(array, left, partition - 1); // 对上一轮排序(切分)时，基准元素左边的子数组进行递归
                recQuickSort(array, partition + 1, right); // 对上一轮排序(切分)时，基准元素右边的子数组进行递归
            }
        }

        private static int partitionIt(int[] array, int left, int right) {
        // 为什么j加一个1，而i没有加1，是因为下面的循环判断是从--j和++i开始的。
        // 而基准元素选的array[left]即第一个元素，所以左游标从第二个元素开始比较。
            int i = left+1;
            int j = right;
            int pivot = array[left];// pivot为选取的基准元素
            while (true) {
                while (i < right && array[i] < pivot) {
                    i++;
                }
                while (j > 0 && array[j] > pivot) {
                    j--;
                }
                if (i >= j) { // 左右游标相遇时停止
                    break;
                } else {
                    swap(array, i, j); // 左右游标未相遇时交换各自所指元素
                }
            }
            swap(array, left, j); // 基准元素和游标相遇时所指元素交换为最后一次交换
            return j; // 一趟排序完成，返回基准元素位置（注意这里基准元素已经交换位置了）
        }

        public static void sort(int[] array) {
            recQuickSort(array, 0, array.length - 1);
        }

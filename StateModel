package StateModel;

public class Account {
    private AccountState state;//创建抽象状态
    private String owner;//创建用户名
    double balance;//创建余额
    public void setBalance(double balance){
        this.balance=balance;
    }
    public Account(String owner,double init){//用户名赋值并存入初始余额
        this.owner=owner;
        this.state=new GreenState(init,this);
        System.out.println(this.owner+"开户初始余额为"+init);
        System.out.println("-------------");
    }
    public void setState(AccountState state){
        this.state=state;
    }
    public void deposit(double amount){//存款方法
        System.out.println(this.owner+"存款"+amount);
        state.deposit(amount); //调用状态对象的deposit()方法
        System.out.println("现在余额为"+    this.balance);
        System.out.println("现在帐户状态为"+this.state.getClass().getName());
        System.out.println("-----------------");
    }
    public void withdraw(double amount){//取款方法
        System.out.println(this.owner+"取款"+amount);
        state.withdraw(amount);    //调用状态对象的withdraw()方法
        System.out.println("现在余额为"+    this.balance);
        System.out.println("现在帐户状态为"+this.state.getClass().getName());
        System.out.println("------------------");
    }
}

package StateModel;

public abstract class AccountState {

    Account acc;
    public abstract void stateCheck();//状态切换方法
    public abstract void deposit(double amount);
    public abstract void withdraw(double amount);
}

package StateModel;

public class Client {
    public static void main(String[] args) {
        Account acc = new Account("吴娟娟",1510);
        acc.deposit(1000);
        acc.withdraw(3000);
        acc.deposit(1000);
        acc.withdraw(2000);
        acc.withdraw(1000);
    }
}
package StateModel;

public class GreenState extends AccountState {
    GreenState(double balance,Account acc){//新建用户状态
        this.acc=acc;
        acc.balance=balance;
    }
    GreenState(AccountState state){
        this.acc=state.acc;
    }
    @Override
    public void stateCheck(){
        if (acc.balance>0){
            acc.setState(new GreenState(this));
        }else if(acc.balance>=-1000&&acc.balance<0){
            acc.setState(new YellowState(this));
        }else if(acc.balance<-1000){
            System.out.println("账户冻结！");
            acc.setState(new RedState(this));
        }
    }
    @Override
    public void deposit(double amount) {
        if(amount>0) {
            acc.setBalance(acc.balance+amount);
        }
        stateCheck();
    }
    @Override
    public void withdraw(double amount) {
        if(amount>0){
            acc.setBalance(acc.balance-amount);
        }
        stateCheck();
    }
}
package StateModel;

public class RedState extends AccountState {

    RedState(AccountState state){
        this.acc=state.acc;
    }
    @Override
    public void stateCheck(){
        if (acc.balance>0){
            acc.setState(new GreenState(this));
        }else if(acc.balance>=-1000&&acc.balance<0){
            acc.setState(new YellowState(this));
        }else if(acc.balance<-1000){
            acc.setState(new RedState(this));
        }
    }
    @Override
    public void deposit(double amount) {
        if(amount>0) {
            acc.setBalance(acc.balance+amount);
        }
        stateCheck();
    }
    @Override
    public void withdraw(double amount){
        System.out.println("账户冻结！");
    }
}
package StateModel;

public class YellowState extends AccountState {
    public YellowState(AccountState state){
        this.acc=state.acc;
    }
    @Override
    public void stateCheck(){
        if (acc.balance>0){
            acc.setState(new GreenState(this));
        }else if(acc.balance>=-1000&&acc.balance<0){
            acc.setState(new YellowState(this));
        }else if(acc.balance<-1000){
            System.out.println("账户冻结！");
            acc.setState(new RedState(this));
        }
    }
    @Override
    public void deposit(double amount) {
        if(amount>0) {
            acc.setBalance(acc.balance+amount);
        }
        stateCheck();
    }
    @Override
    public void withdraw(double amount) {
        if(amount>0){
            acc.setBalance(acc.balance-amount);
        }
        stateCheck();
    }
}

